#!/usr/bin/env python2
# -*- coding=utf-8 -*-
import sys,os,math
import pango
import pygtk
import gtk
from gtk import gdk
import cairo
# import Images
import gobject
flag=0
icon_size=60
my_path='/usr/share/mmfm'
icon=my_path+'/pics/note_1.png'
name=['Douban',' duomi' ,'Kugou',' kuwo','Kuwo',' listen_around',' music_pure',' NRadio','qingmeng',' renren',' xiami']
name2=['豆瓣','多米','酷狗','酷我','酷我电台','随便听听','轻音乐','网络电台','青檬电台','人人电台','虾米']
x=int(math.sqrt(len(name)))
y=int(1.0*len(name)/x+0.99)

home_path=os.getenv('HOME')
rc_file=home_path+'/.mmfmrc'
if os.path.isfile(rc_file):
    f=open(rc_file,'r')
    (m,n)=f.readline().split()
    f.close()
else :
    (m,n)=(800,600)

def destry(self,data):
	if data>=0 :
		path=my_path+'/'+name[data].lstrip()
	
		path='"'+path+'"'
		os.system(path+"&")
	
		
	self.parent.parent.destroy()
	global flag
	flag=0	
	
def unfocused(self,widget):
	self.destroy()
	global flag
	flag=0

def check(self,event):
	if event.button == 3:
		(m,n) = self.window.get_position()
		m=str(m)+' '+str(n)
		w=open(rc_file,'w')
		w.writelines(m)
		w.close()
		
		gtk.main_quit()


class pngtranswin:
	def __init__(self):
		self.window = gtk.Window()
		
		
		
		self.window.set_type_hint(gtk.gdk.WINDOW_TYPE_HINT_DOCK)
		self.window.set_keep_below(True)
		self.window.set_size_request(icon_size,icon_size)
		self.window.set_resizable(0)
		self.window.set_accept_focus(False)
		self.window.move(int(m),int(n))
		
		self.window.add_events(gtk.gdk.BUTTON_PRESS_MASK |gtk.gdk.POINTER_MOTION_MASK)
		self.window.connect("motion-notify-event",self.open_sub_window)
		self.window.connect("button-press-event",check)
		
		
		self.window.set_app_paintable(1)
		self.gtk_screen = self.window.get_screen()
		colormap = self.gtk_screen.get_rgba_colormap()
		if colormap == None:
			colormap = self.gtk_screen.get_rgb_colormap()
		gtk.widget_set_default_colormap(colormap)
		if not self.window.is_composited():
			self.supports_alpha = False
		else:
			self.supports_alpha = True
		
		self.w,self.h = self.window.get_size()
		
		self.window.connect("expose_event", self.expose)
		self.window.connect("destroy", gtk.main_quit)
	


	


   	def open_sub_window(self, widget=None, data=None):
   		global flag,x,y
   		i=t=0
   		
   		
   		if flag==0:   	
   			w = gtk.Window()
  			table = gtk.Table(x, y, True)
			w.add(table)
			table.set_row_spacings(8)
			table.set_col_spacings(8)
			w.set_title("Start")

			while i<x:
				j=0
				while j<y:
					if t<len(name):
						ICON=my_path+'/pics/'+name[t].lower().lstrip()+'.png'
						
						image = gtk.Image()
						pixbuf = gtk.gdk.pixbuf_new_from_file(ICON)
						scaled_buf = pixbuf.scale_simple(icon_size-15,icon_size-15,gtk.gdk.INTERP_BILINEAR)
						image.set_from_pixbuf(scaled_buf)
	
		   				button = gtk.Button()
		   				button.add(image)
		   				gtk.Tooltips().set_tip(button,name2[t])
		   				table.attach(button, j, j+1, i, i+1)
		   				button.connect("clicked",destry,t)
		   			t=t+1
		   			j=j+1
		   			
	   			i=i+1
	   		ICON=my_path+'/pics/hide_me.png'
	   		image = gtk.Image()
			pixbuf = gtk.gdk.pixbuf_new_from_file(ICON)
			scaled_buf = pixbuf.scale_simple(50,50,gtk.gdk.INTERP_BILINEAR)
			image.set_from_pixbuf(scaled_buf)
			button = gtk.Button()
		   	button.add(image)
		   	gtk.Tooltips().set_tip(button,"Hide Me")
		   	table.attach(button, y-1, y, x-1, x)
			button.connect("clicked",destry,-1)
			
   			w.set_decorated(False)
   			w.set_size_request(y*icon_size,x*icon_size)
   			w.set_resizable(0)
   			w.set_transient_for(self.window)
   			w.set_type_hint(gtk.gdk.WINDOW_TYPE_HINT_TOOLTIP)
   			w.set_keep_above(True)
   			
   			#w.set_position(gtk.WIN_POS_CENTER_ON_PARENT)
   			w.show_all()
   			w.connect("focus-out-event",unfocused)
   			
   			(m, n) = self.window.get_position()
   			w.move(m-y*icon_size,n-(x-1)*icon_size/2)
   			
   			flag=1

	

		

	def expose (self, widget, event):
		self.ctx = self.window.window.cairo_create()
		# set a clip region for the expose event, XShape stuff
		self.ctx.save()
		if self.supports_alpha == False:
			self.ctx.set_source_rgb(1, 1, 1)
		else:
			self.ctx.set_source_rgba(1, 1, 1,0)
		self.ctx.set_operator (cairo.OPERATOR_SOURCE)
		self.ctx.paint()
		self.ctx.restore()
		self.ctx.rectangle(event.area.x, event.area.y,
				event.area.width, event.area.height)
		self.ctx.clip()
		self.draw_image(self.ctx,0,0,icon)

	def setup(self):
		# Set menu background image
		self.background =  gtk.Image()
		self.frame = gtk.Fixed()
		self.window.add (self.frame)
		
		# Set window shape from alpha mask of background image
		w,h = self.window.get_size()
		if w==0: w = 800
		if h==0: h = 650
		self.w = w
		self.h = h
		self.pixmap = gtk.gdk.Pixmap (None, w, h, 1)
		ctx = self.pixmap.cairo_create()
		# todo: modify picture source
		#self.bgpb = gtk.gdk.pixbuf_new_from_file('base.png')
		ctx.save()
		ctx.set_source_rgba(1, 1, 1,0)
		ctx.set_operator (cairo.OPERATOR_SOURCE)
		ctx.paint()
		ctx.restore()
		self.draw_image(ctx,0,0,icon)
		
		if self.window.is_composited():
			ctx.rectangle(0,0,w,h)
			ctx.fill()			
			self.window.input_shape_combine_mask(self.pixmap,0,0)
		else:
			self.window.shape_combine_mask(self.pixmap, 0, 0)

	def draw_image(self,ctx,x,y, pix):
		"""Draws a picture from specified path with a certain width and
height"""

		ctx.save()
		ctx.translate(x, y)	
		pixbuf = gtk.gdk.pixbuf_new_from_file(pix)
		scaled_buf = pixbuf.scale_simple(icon_size,icon_size,gtk.gdk.INTERP_BILINEAR)
		format = cairo.FORMAT_RGB24
		if pixbuf.get_has_alpha():
			format = cairo.FORMAT_ARGB32
		#if Images.flip != None:
		#	pixbuf = pixbuf.flip(Images.flip)
	
		#iw = pixbuf.get_width()
		#ih = pixbuf.get_height()
		iw=ih=65
		image = cairo.ImageSurface(format, iw, ih)
		image = ctx.set_source_pixbuf(scaled_buf, 0, 0)
		
		ctx.paint()
		puxbuf = None
		image = None
		ctx.restore()
		ctx.clip()

	def show_window(self):
		self.window.show_all()
		while gtk.events_pending():
			gtk.main_iteration()
		self.window.present()
		self.window.grab_focus()
		self.p = 1

if __name__ == "__main__":
	m = pngtranswin()
	m.setup()
	m.show_window()
	gtk.main()

